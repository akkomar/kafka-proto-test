// Code generated by protoc-gen-go.
// source: events/AdEvents.proto
// DO NOT EDIT!

/*
Package events is a generated protocol buffer package.

It is generated from these files:
	events/AdEvents.proto

It has these top-level messages:
	AdEvent
*/
package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	EventType_IMPRESSION EventType = 0
	EventType_CLICK      EventType = 1
	EventType_SCROLL     EventType = 2
	EventType_CONVERSION EventType = 3
	EventType_PIXEL      EventType = 4
)

var EventType_name = map[int32]string{
	0: "IMPRESSION",
	1: "CLICK",
	2: "SCROLL",
	3: "CONVERSION",
	4: "PIXEL",
}
var EventType_value = map[string]int32{
	"IMPRESSION": 0,
	"CLICK":      1,
	"SCROLL":     2,
	"CONVERSION": 3,
	"PIXEL":      4,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AdEvent struct {
	Timestamp int64     `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	EventType EventType `protobuf:"varint,2,opt,name=event_type,json=eventType,enum=events.EventType" json:"event_type,omitempty"`
	Ssp       string    `protobuf:"bytes,3,opt,name=ssp" json:"ssp,omitempty"`
	IHash     string    `protobuf:"bytes,4,opt,name=i_hash,json=iHash" json:"i_hash,omitempty"`
	Cookie    string    `protobuf:"bytes,5,opt,name=cookie" json:"cookie,omitempty"`
	OHash     string    `protobuf:"bytes,6,opt,name=o_hash,json=oHash" json:"o_hash,omitempty"`
	CHash     string    `protobuf:"bytes,7,opt,name=c_hash,json=cHash" json:"c_hash,omitempty"`
	PHash     string    `protobuf:"bytes,8,opt,name=p_hash,json=pHash" json:"p_hash,omitempty"`
	Country   string    `protobuf:"bytes,10,opt,name=country" json:"country,omitempty"`
	Host      string    `protobuf:"bytes,11,opt,name=host" json:"host,omitempty"`
	PName     string    `protobuf:"bytes,30,opt,name=p_name,json=pName" json:"p_name,omitempty"`
}

func (m *AdEvent) Reset()                    { *m = AdEvent{} }
func (m *AdEvent) String() string            { return proto.CompactTextString(m) }
func (*AdEvent) ProtoMessage()               {}
func (*AdEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AdEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AdEvent) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_IMPRESSION
}

func (m *AdEvent) GetSsp() string {
	if m != nil {
		return m.Ssp
	}
	return ""
}

func (m *AdEvent) GetIHash() string {
	if m != nil {
		return m.IHash
	}
	return ""
}

func (m *AdEvent) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *AdEvent) GetOHash() string {
	if m != nil {
		return m.OHash
	}
	return ""
}

func (m *AdEvent) GetCHash() string {
	if m != nil {
		return m.CHash
	}
	return ""
}

func (m *AdEvent) GetPHash() string {
	if m != nil {
		return m.PHash
	}
	return ""
}

func (m *AdEvent) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *AdEvent) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AdEvent) GetPName() string {
	if m != nil {
		return m.PName
	}
	return ""
}

func init() {
	proto.RegisterType((*AdEvent)(nil), "events.AdEvent")
	proto.RegisterEnum("events.EventType", EventType_name, EventType_value)
}

func init() { proto.RegisterFile("events/AdEvents.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x91, 0xd1, 0x4a, 0x84, 0x40,
	0x18, 0x85, 0x73, 0xdd, 0x9d, 0xcd, 0x3f, 0x58, 0x6c, 0x60, 0x63, 0x2e, 0x22, 0xa4, 0x2b, 0xe9,
	0xc2, 0xa2, 0x9e, 0x20, 0x44, 0x48, 0x72, 0x75, 0x19, 0x23, 0xba, 0x5b, 0xcc, 0x06, 0x94, 0xd0,
	0x19, 0x76, 0xa6, 0xc0, 0xf7, 0xe9, 0x41, 0xc3, 0x7f, 0xb4, 0xee, 0xce, 0xf9, 0xe6, 0x9b, 0x03,
	0xc3, 0xc0, 0x56, 0x7c, 0x8b, 0xde, 0xe8, 0xdb, 0xc7, 0x8f, 0x04, 0x43, 0xa4, 0x8e, 0xd2, 0x48,
	0x4a, 0x2c, 0xbe, 0xfe, 0x59, 0xc0, 0x7a, 0x3a, 0xa2, 0x97, 0xe0, 0x99, 0xb6, 0x13, 0xda, 0x54,
	0x9d, 0x62, 0x4e, 0xe0, 0x84, 0x2e, 0xff, 0x07, 0xf4, 0x0e, 0x00, 0xef, 0x1c, 0xcc, 0xa0, 0x04,
	0x5b, 0x04, 0x4e, 0xb8, 0xb9, 0x3f, 0x8f, 0xec, 0x4c, 0x84, 0x03, 0x2f, 0x83, 0x12, 0xdc, 0x13,
	0x73, 0xa4, 0x3e, 0xb8, 0x5a, 0x2b, 0xe6, 0x06, 0x4e, 0xe8, 0xf1, 0x31, 0xd2, 0x2d, 0x90, 0xf6,
	0xd0, 0x54, 0xba, 0x61, 0x4b, 0x84, 0xab, 0xf6, 0xa9, 0xd2, 0x0d, 0xbd, 0x00, 0x52, 0x4b, 0xf9,
	0xd9, 0x0a, 0xb6, 0x42, 0x3c, 0xb5, 0x51, 0x97, 0x56, 0x27, 0x56, 0x97, 0xa8, 0x6f, 0x81, 0xd4,
	0x16, 0xaf, 0x2d, 0xae, 0x67, 0xac, 0x2c, 0x3e, 0xb5, 0x58, 0x21, 0x66, 0xb0, 0xae, 0xe5, 0x57,
	0x6f, 0x8e, 0x03, 0x03, 0xe4, 0x73, 0xa5, 0x14, 0x96, 0x8d, 0xd4, 0x86, 0x9d, 0x21, 0xc6, 0x6c,
	0x47, 0xfa, 0xaa, 0x13, 0xec, 0x6a, 0x1a, 0xc9, 0xab, 0x4e, 0xdc, 0xec, 0xc0, 0xfb, 0x7b, 0x22,
	0xdd, 0x00, 0xa4, 0xbb, 0x3d, 0x4f, 0xca, 0x32, 0x2d, 0x72, 0xff, 0x84, 0x7a, 0xb0, 0x8a, 0xb3,
	0x34, 0x7e, 0xf6, 0x1d, 0x0a, 0x40, 0xca, 0x98, 0x17, 0x59, 0xe6, 0x2f, 0x46, 0x2d, 0x2e, 0xf2,
	0xd7, 0x84, 0xa3, 0xe6, 0x8e, 0xda, 0x3e, 0x7d, 0x4b, 0x32, 0x7f, 0xf9, 0x4e, 0xf0, 0x13, 0x1e,
	0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x41, 0x5d, 0xbe, 0x23, 0x9d, 0x01, 0x00, 0x00,
}
